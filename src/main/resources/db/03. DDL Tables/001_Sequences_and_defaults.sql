-- You cannot replace a sequence, you need to drop it.
-- sequence.NEXTVAL you cannot use it for SELECT distinct statements, group by, having, order by!!!!!
-- And in a subquery in SELECT DELETE UPDATE. INSERT SUBQUERies are OK!!! SELECT for a VIEW.

CREATE SEQUENCE seq_counter START WITH 1 INCREMENT BY 1 MINVALUE 0 MAXVALUE 9999 CYCLE CACHE 50;

--[2020-03-12 11:35:13] [72000][8002] ORA-08002: sequence SEQ_COUNTER.CURRVAL is not yet defined in this session
SELECT seq_counter.currval
FROM dual;

--you can use currval after you've used nextval
SELECT seq_counter.nextval
FROM dual;

--now it will work!
SELECT seq_counter.currval
FROM dual;

SELECT *
FROM user_sequences;

DROP SEQUENCE seq_counter;

CREATE TABLE table_with_sequence
(
    id   NUMBER(6) DEFAULT seq_counter.nextval,
    text VARCHAR2(100)
);

INSERT INTO table_with_sequence (id, text)
VALUES (999, 'inserted with explicit value');


INSERT INTO table_with_sequence (id, text)
VALUES (NULL, 'inserted with explicit null');


INSERT INTO table_with_sequence (text)
VALUES ('inserted with null value');

SELECT *
FROM table_with_sequence;

DROP TABLE table_with_sequence;

-- DEFAULT ON NULL
-- You cannot reference another column in a DEFAULT
-- DEFAULT does not prevent explicit nulls, you need DEFAULT ON NULL for that
CREATE TABLE table_with_sequence
(
    id   NUMBER(6) DEFAULT ON NULL seq_counter.nextval,
    text VARCHAR2(100)
);

INSERT INTO table_with_sequence (id, text)
VALUES (999, 'inserted with explicit value');

INSERT INTO table_with_sequence (id, text)
VALUES (NULL, 'inserted with explicit null');

INSERT INTO table_with_sequence (text)
VALUES ('inserted with null value');

SELECT *
FROM table_with_sequence;

DROP TABLE table_with_sequence;
DROP SEQUENCE seq_counter;

CREATE TABLE table_with_always_identity
(
    id   NUMBER(6) GENERATED ALWAYS AS IDENTITY,
    text VARCHAR2(100)
);

SELECT *
FROM user_sequences;


DROP SEQUENCE ISEQ$$_74707; --replace with result form previous, cannot drop system generated sequence

Drop table table_with_always_identity;
--GENERATED ALWAYS
--The optional keywords GENERATED ALWAYS are provided for semantic clarity.
-- They indicate that the column is not stored on disk, but is evaluated on demand.

CREATE TABLE table_with_identity
(
    id   NUMBER(6) GENERATED BY DEFAULT AS IDENTITY,
    text VARCHAR2(100)
);

SELECT *
FROM user_sequences;

INSERT INTO table_with_identity (id, text) VALUES (1000, 'explicit value');
INSERT INTO table_with_identity (text) VALUES ('implicit null');
INSERT INTO table_with_identity (id, text) VALUES (null, 'explicit null'); --cannot insert NULL!!!

SELECT *
FROM user_constraints
WHERE table_name = 'TABLE_WITH_IDENTITY'; --ID IS NOT NULL automatic constraint

--cannot drop not null constraint on an identity column
ALTER TABLE table_with_identity
    DROP CONSTRAINT sys_c008725;

SELECT *
FROM table_with_identity;

Drop table table_with_identity;

--GENERATED ALWAYS used a virtual column
CREATE TABLE table_with_generated_always
(
    text VARCHAR2(100),
    decorated_text VARCHAR2(150) GENERATED ALWAYS AS ( text || ' with decoration') VIRTUAL
);

-- The optional keyword VIRTUAL is provided for semantic clarity.

INSERT INTO table_with_generated_always(text) VALUES ('primary text');

INSERT INTO table_with_generated_always(text, decorated_text) VALUES ('primary text', 'decoration');

SELECT *
FROM table_with_generated_always;

UPDATE table_with_generated_always SET text = 'different text' WHERE text LIKE '%primary%';

SELECT *
FROM table_with_generated_always;

drop TABLE table_with_generated_always;
